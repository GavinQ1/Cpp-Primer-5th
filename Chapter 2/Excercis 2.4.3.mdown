#Chapter 2.4.3. Top-Level const
##Excercis 2.4.3 
###Exercise 2.27: Which of the following initializations are legal? Explain why.
```C++
(a) int i = -1, &r = 0; // illegal, r must be initialized with an object. 
(b) int *const p2 = &i2; // legal 
(c) const int i = -1, &r = 0; // legal
(d) const int *const p3 = &i2; // legal 
(e) const int *p1 = &i2; //legal, can convert a nonconst to a const 
(f) const int &const r2; // illegal, a reference cannot be const 
(g) const int i2 = i, &r = i; // legal
```
###Exercise 2.28: Explain the following definitions. Identify any that are illegal.
```C++
(a) int i, *const cp; // legal; illegal, must be initialized 
(b) int *p1, *const p2; // legal; illegal, must be initialized 
(c) const int ic, &r = ic; // illegal, must be initialized; legal 
(d) const int *const p3; // illegal, must be initialized 
(e) const int *p; // legal, a pointer to a const int
```
###Exercise 2.29: Uing the variables in the previous exercise, which of the following assignments are legal? Explain why.
```C++
(a) i = ic; // legal
(b) p1 = p3; // illegal, low-level const not matching
(c) p1 = &ic; // illegal, low-level const not matching
(d) p3 = &ic; // illegal, const pointer cannot be modified
(e) p2 = p1; // illegal, const pointer cannot be modified
(f) ic = *p3; // illegal, const int cannot be modified
```
###Exercise 2.30: For each of the following declarations indicate whether the object being declared has top-level or low-level const.
```C++
const int v2 = 0; int v1 = v2; // v2 top-level, v1 = v2 legal as top-level can be ignored
int *p1 = &v1, &r1 = v1; // none const 
const int *p2 = &v2, *const p3 = &i, &r2 = v2;  // p2 low-level, p3 low-and-top-level, r2 low-level 
```
### Exercise 2.31: Given the declarations in the previous exercise determine whether the following assignments are legal. Explain how the top-level or low-level const applies in each case.
```C++
r1 = v2; // legal, top-level const can be ignored 
p1 = p2; // illegal, low-level const not matching
p2 = p1; // legal, top-level const can be ignored 
p1 = p3; // illegal, low-level const not matching
p2 = p3; // legal, top-level const can be ignored 
```
##Note
We use the term ***top-level*** (e.g. int *const pi) const to indicate that the pointer (or object) itself is a const. <br>
1 value(address) cannot be changed but object can be changed<br>
2 must be initialized (watch if the object is const or nonconst)<br>
When a pointer can point to a const object, we refer to that const as a ***low-level*** const.<br>
1 value can be changed, object cannot be changed
```C++
int i = 1;
const int ci = 1;
int *const tpi = &i; // top-level, &ci not ok, low-level not matching
const int *lpi = &ci; // low-level, &i also ok, not initializing also ok
const int *const tlpi = &ci; // low top, &i also ok

``` 
Low-level const appears in the base type of compound types such as pointers or references. Note that pointer types, unlike most other types, can have both top-level and low-level const independently:
```C++
int i = 0;
int *const p1 = &i; // we can't change the value of p1; const is top-level
const int ci = 42; // we cannot change ci; const is top-level
const int *p2 = &ci; // we can change p2; const is low-level
const int *const p3 = p2; // right-most const is top-level, left-most is not
const int &r = ci; // const in reference types is always low-level
```
The distinction between top-level and low-level matters when we copy an object. *When we copy an object, top-level consts are ignored*:
```C++
i = ci; // ok: copying the value of ci; top-level const in ci is ignored
p2 = p3; // ok: pointed-to type matches; top-level const in p3 is ignored
```
low-level const is never ignored. When we copy an object, both objects must have the same low-level const qualification or there must be a conversion between the types of the two objects. **In general, we can convert a nonconst to const but not the other way round:**
```C++
int *p = p3; // error: p3 has a low-level const but p doesn't, cannot convert const p3 to a nonconst pointer 
p2 = p3; // ok: p2 has the same low-level const qualification as p3
p2 = &i; // ok: we can convert int* to const int*
int &r = ci; // error: can't bind an ordinary int& to a const int object
const int &r2 = i; // ok: can bind const int& to plain int
```