#Chapter 2.3.3 Understanding Compound Type Declarations
##Excercis 2.3.3
###Exercise 2.25: Determine the types and values of each of the following variables.
(a) 
```C++
int* ip , &r = ip;
// pointer to int, invalid reference
```
(b) 
```C++
int i, *ip = 0;
// integer, null pointer 
```
(c) 
```C++
int* ip, ip2;
// pointer to int, integer
```

##Notes
###TIP

####**It can be easier to understand complicated pointer or reference declarations if you read them from right to left.**

###Defining Multiple Variables
```C++
// i is an int; p is a pointer to int; r is a reference to int
int i = 1024, *p = &i, &r = i;

int* p; // legal but might be misleading

int* p1, p2; // p1 is a pointer to int; p2 is an int

int *p1, *p2; // both p1 and p2 are pointers to int 

int* p1; // p1 is a pointer to int
int* p2; // p2 is a pointer to int
```

###Pointers to Pointers
In general, there are no limits to how many type modifiers can be applied to a declarator.
```C++
int ival = 1024;
int *pi = &ival; // pi points to an int
int **ppi = &pi; // ppi points to a pointer to an int

/*
Just as dereferencing a pointer to an int yields an int, dereferencing a pointer to
a pointer yields a pointer. To access the underlying object, we must dereference the
original pointer twice:
*/

cout << "The value of ival\n"
	 << "direct value: " << ival << "\n"
	 << "indirect value: " << *pi << "\n"
	 << "doubly indirect value: " << **ppi
	 << endl;
```
###References to Pointers
```C++
int i = 42;
int *p; // p is a pointer to int
int *&r = p; // r is a reference to the pointer p
r = &i; // r refers to a pointer; assigning &i to r makes p point to i
*r = 0; // dereferencing r yields i, the object to which p points; changes i to 0
```